// C:\Users\Admin1\Downloads\kotuslugi\kotouslugi-2025-summer-team-cheremsha\frontend\src\app\modules\service\components\vet\constants.service.ts

import { Injectable } from '@angular/core';
import { EBreedMap, ESexMap, IValueBreed, IValueSex, IValueCat, ICatGroupedBySex } from '@models/cat.model';
import { mergeMap, Observable, of, take } from 'rxjs';
import { CatService } from '@services/cat/cat.service';
import { IValue } from '@models/common.model';

@Injectable({
  providedIn: 'root'
})
export class ConstantsService {

  // –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–∞
  public sexOptions: IValueSex[] = [
    {
      id: 'male',
      text: ESexMap.male
    },
    {
      id: 'female',
      text: ESexMap.female
    }
  ];

  // –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ä–æ–¥
  public breedOptions: IValueBreed[] = [
    {
      id: 'siamese',
      text: EBreedMap.siamese
    },
    {
      id: 'british_shorthair',
      text: EBreedMap.british_shorthair
    },
    {
      id: 'maine_coon',
      text: EBreedMap.maine_coon
    },
    {
      id: 'persian',
      text: EBreedMap.persian
    },
    {
      id: 'sphinx',
      text: EBreedMap.sphinx
    },
    {
      id: 'scottish_fold',
      text: EBreedMap.scottish_fold
    },
    {
      id: 'russian_blue',
      text: EBreedMap.russian_blue
    },
    {
      id: 'munchkin',
      text: EBreedMap.munchkin
    }
  ];

  // –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  public doctorOptions: IValue[] = [
    {
      id: 0,
      text: '–¢–µ—Ä–∞–ø–µ–≤—Ç'
    },
    {
      id: 1,
      text: '–û—Ä—Ç–æ–ø–µ–¥'
    },
    {
      id: 2,
      text: '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥'
    },
    {
      id: 3,
      text: '–•–∏—Ä—É—Ä–≥'
    },
    {
      id: 4,
      text: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥'
    }
  ];

  // üëá –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã
  public shopOptions: IValue[] = [
    {
      id: 0, // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID, –µ—Å–ª–∏ —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'pet_store_1')
      text: '–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω "–ö–æ—Ç–ë–∞—Ç–æ–Ω"'
    },
    {
      id: 1,
      text: '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç "–ü—É—à–∏—Å—Ç–∏–∫"'
    },
    {
      id: 2,
      text: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "–ú—É—Ä–ú—É—Ä–§—É–¥"'
    },
    {
      id: 3,
      text: '–ú–µ—Å—Ç–Ω—ã–π –ª–∞—Ä–µ–∫ —É –ú—É—Ä–∫–∏'
    }
  ];

  constructor(
    private catService: CatService,
  ) { }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—É, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—è –æ—Ç–≤–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ dropdown
   */
  public getCatOptionsBySex(): Observable<ICatGroupedBySex> {
    return this.catService.getCatList().pipe(
      take(1)
    ).pipe(
      mergeMap((res) => {
        const male: IValueCat[] = [];
        const female: IValueCat[] = [];
        res.forEach(item => {
          if (item.sex === 'male') {
            male.push({id: item.id, text: item.name});
          } else {
            female.push({id: item.id, text: item.name});
          }
        });
        return of({
          male,
          female
        });
      })
    );
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–æ–≤, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—è –æ—Ç–≤–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ dropdown
   */
  public getCatOptionsAll():  Observable<IValueCat[]> {
    return this.catService.getCatList().pipe(
      take(1)
    ).pipe(
      mergeMap((res) => {
        return of(res.map((item) => {
          return {
            id: item.id,
            text: item.name
          }
        }));
      })
    )
  }
}
